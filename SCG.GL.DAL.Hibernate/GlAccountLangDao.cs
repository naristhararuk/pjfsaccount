using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using SS.Standard.Data.NHibernate.Dao;

using SCG.GL.DTO;
using SCG.GL.DAL;
using NHibernate;
using NHibernate.Expression;
using NHibernate.Transform;
using SS.Standard.Data.NHibernate.QueryCreator;

namespace SCG.GL.DAL.Hibernate
{
	/// <summary>
	/// POJO for GlAccountLang. This class is autogenerated
	/// </summary>
	public partial class GlAccountLangDao : NHibernateDaoBase<GlAccountLang, long>, IGlAccountLangDao
	{
        public GlAccountLangDao()
        {
        }

        #region public IList<GlAccountLang> FindByAccountId(short accountId)
        public IList<SCG.GL.DTO.ValueObject.AccountLang> FindByAccountId(short accountId)
        {
            StringBuilder sql = new StringBuilder();
            sql.Append(" SELECT ");
            sql.Append("    GlAccountLang.ID , ");
            sql.Append("    GlAccountLang.AccId , ");
            sql.Append("    GlAccountLang.AccountName , ");
            sql.Append("    GlAccountLang.Comment , ");
            sql.Append("    GlAccountLang.Active , ");
            sql.Append("    DbLanguage.LanguageId , ");
            sql.Append("    DbLanguage.LanguageName ");
            sql.Append(" FROM DbLanguage");
            sql.Append("    LEFT JOIN GlAccountLang ON DbLanguage.LanguageId = GlAccountLang.LanguageId AND GlAccountLang.AccID = :AccId ");
            sql.Append("    LEFT JOIN GlAccount     ON GlAccountLang.AccID = GlAccount.AccID");

            ISQLQuery query = GetCurrentSession().CreateSQLQuery(sql.ToString());
            QueryParameterBuilder queryParameterBuilder = new QueryParameterBuilder();
            queryParameterBuilder.AddParameterData("AccId", typeof(Int16), accountId);
            queryParameterBuilder.FillParameters(query);
            query.AddScalar("AccId", NHibernateUtil.Int16);
            query.AddScalar("LanguageId", NHibernateUtil.Int16);
            query.AddScalar("AccountName", NHibernateUtil.String);
            query.AddScalar("Comment", NHibernateUtil.String);
            query.AddScalar("Active", NHibernateUtil.Boolean);
            query.AddScalar("LanguageName", NHibernateUtil.String);

            IList<SCG.GL.DTO.ValueObject.AccountLang> list =       
                query.SetResultTransformer(Transformers.AliasToBean(typeof(SCG.GL.DTO.ValueObject.AccountLang))).List<SCG.GL.DTO.ValueObject.AccountLang>();
            return list;
        }
        #endregion public IList<GlAccountLang> FindByAccountId(short accountId)

        #region public void DeleteAllAccountLang(short accountId)
        public void DeleteAllAccountLang(short accountId)
        {
            GetCurrentSession()
            .Delete(" FROM GlAccountLang a WHERE a.Acc.AccId = :AccID ", 
            new object[] { accountId }, 
            new NHibernate.Type.IType[] { NHibernateUtil.Int16 });
        }
        #endregion public void DeleteAllAccountLang(short accountId)

        public GlAccountLang FindAccountLangByAccountID(short accID,short languageID)
        {
            //ICriteria criteria = GetCurrentSession().CreateCriteria(typeof(GlAccountLang), "al");
            //criteria.Add(Expression.Eq("Acc.AccID",accID));
            //return criteria.UniqueResult<GlAccountLang>();
            IQuery query = GetCurrentSession().CreateQuery("from GlAccountLang where AccID =:AccID and LanguageID =:LanguageID");
            query.SetInt16("AccID", accID);
            query.SetInt16("LanguageID", languageID);
            GlAccountLang accountLang = query.UniqueResult<GlAccountLang>();
            Console.WriteLine(accountLang.Acc);
            return accountLang;
        }
	}
}
