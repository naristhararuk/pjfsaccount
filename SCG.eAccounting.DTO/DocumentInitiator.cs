//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
    /// <summary>
    /// POJO for DocumentInitiator. This class is autogenerated
    /// </summary>
    [Serializable]
    public partial class DocumentInitiator : INHibernateAdapterDTO<long>
    {
        #region Fields

        private long initiatorID;
        private short seq;
        private string initiatorType;
        private bool doApprove;
        private bool active;
        private long creBy;
        private DateTime creDate;
        private long updBy;
        private DateTime updDate;
        private string updPgm;
        private Byte[] rowVersion;
        private bool isSkip;
        private string skipReason;
        private SCG.eAccounting.DTO.SCGDocument documentID;
        private SS.SU.DTO.SuUser userID;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the DocumentInitiator class
        /// </summary>
        public DocumentInitiator()
        {
        }

        public DocumentInitiator(long initiatorID)
        {
            this.initiatorID = initiatorID;
        }

        /// <summary>
        /// Initializes a new instance of the DocumentInitiator class
        /// </summary>
        /// <param name="seq">Initial <see cref="DocumentInitiator.Seq" /> value</param>
        /// <param name="initiatorType">Initial <see cref="DocumentInitiator.InitiatorType" /> value</param>
        /// <param name="doApprove">Initial <see cref="DocumentInitiator.DoApprove" /> value</param>
        /// <param name="active">Initial <see cref="DocumentInitiator.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="DocumentInitiator.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="DocumentInitiator.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="DocumentInitiator.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="DocumentInitiator.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="DocumentInitiator.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="DocumentInitiator.RowVersion" /> value</param>
        /// <param name="documentID">Initial <see cref="DocumentInitiator.DocumentID" /> value</param>
        /// <param name="userID">Initial <see cref="DocumentInitiator.UserID" /> value</param>
        public DocumentInitiator(short seq, string initiatorType, bool doApprove, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, Byte[] rowVersion, bool isSkip, string skipReason, SCG.eAccounting.DTO.SCGDocument documentID, SS.SU.DTO.SuUser userID)
        {
            this.seq = seq;
            this.initiatorType = initiatorType;
            this.doApprove = doApprove;
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.isSkip = isSkip;
            this.skipReason = skipReason;
            this.documentID = documentID;
            this.userID = userID;
        }

        /// <summary>
        /// Minimal constructor for class DocumentInitiator
        /// </summary>
        /// <param name="active">Initial <see cref="DocumentInitiator.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="DocumentInitiator.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="DocumentInitiator.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="DocumentInitiator.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="DocumentInitiator.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="DocumentInitiator.UpdPgm" /> value</param>
        public DocumentInitiator(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
        {
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the InitiatorID for the current DocumentInitiator
        /// </summary>
        public virtual long InitiatorID
        {
            get { return this.initiatorID; }
            set { this.initiatorID = value; }
        }

        /// <summary>
        /// Gets or sets the Seq for the current DocumentInitiator
        /// </summary>
        public virtual short Seq
        {
            get { return this.seq; }
            set { this.seq = value; }
        }

        /// <summary>
        /// Gets or sets the InitiatorType for the current DocumentInitiator
        /// </summary>
        public virtual string InitiatorType
        {
            get { return this.initiatorType; }
            set { this.initiatorType = value; }
        }

        /// <summary>
        /// Gets or sets the DoApprove for the current DocumentInitiator
        /// </summary>
        public virtual bool DoApprove
        {
            get { return this.doApprove; }
            set { this.doApprove = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current DocumentInitiator
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current DocumentInitiator
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current DocumentInitiator
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current DocumentInitiator
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current DocumentInitiator
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current DocumentInitiator
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current DocumentInitiator
        /// </summary>
        public virtual Byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the IsSkip for the current DocumentInitiator
        /// </summary>
        public virtual bool IsSkip
        {
            get { return this.isSkip; }
            set { this.isSkip = value; }
        }

        /// <summary>
        /// Gets or sets the SkipReason for the current DocumentInitiator
        /// </summary>
        public virtual string SkipReason
        {
            get { return this.skipReason; }
            set { this.skipReason = value; }
        }

        /// <summary>
        /// Gets or sets the DocumentID for the current DocumentInitiator
        /// </summary>
        public virtual SCG.eAccounting.DTO.SCGDocument DocumentID
        {
            get { return this.documentID; }
            set { this.documentID = value; }
        }

        /// <summary>
        /// Gets or sets the UserID for the current DocumentInitiator
        /// </summary>
        public virtual SS.SU.DTO.SuUser UserID
        {
            get { return this.userID; }
            set { this.userID = value; }
        }

        #endregion

        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.InitiatorID = Convert.ToInt64(dr["InitiatorID"]);
            this.Seq = Convert.ToInt16(dr["Seq"]);
            this.InitiatorType = dr["InitiatorType"].ToString();
            this.SkipReason = dr["SkipReason"].ToString();

            if (!string.IsNullOrEmpty(dr["DoApprove"].ToString()))
                this.DoApprove = (bool)dr["DoApprove"];

            if (!string.IsNullOrEmpty(dr["IsSkip"].ToString()))
                this.IsSkip = (bool)dr["IsSkip"];

            if (!string.IsNullOrEmpty(dr["DocumentID"].ToString()))
                this.DocumentID = new SCGDocument(Convert.ToInt64(dr["DocumentID"]));

            if (!string.IsNullOrEmpty(dr["UserID"].ToString()))
                this.UserID = new SS.SU.DTO.SuUser(Convert.ToInt64(dr["UserID"]));

            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("InitiatorID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["InitiatorID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["InitiatorID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["InitiatorID", rowState].ToString());
        }
        #endregion
    }
}
