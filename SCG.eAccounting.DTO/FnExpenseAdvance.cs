//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
    /// <summary>
    /// POJO for FnExpenseAdvance. This class is autogenerated
    /// </summary>
    [Serializable]
    public partial class FnExpenseAdvance : INHibernateAdapterDTO<long>
    {
        #region Fields

        private long fnExpenseAdvanceID;
        private bool active;
        private long creBy;
        private DateTime creDate;
        private long updBy;
        private DateTime updDate;
        private string updPgm;
        private byte[] rowVersion;
        private SCG.eAccounting.DTO.FnExpenseDocument expense;
        private SCG.eAccounting.DTO.AvAdvanceDocument advance;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the FnExpenseAdvance class
        /// </summary>
        public FnExpenseAdvance()
        {
        }

        public FnExpenseAdvance(long fnExpenseAdvanceID)
        {
            this.fnExpenseAdvanceID = fnExpenseAdvanceID;
        }

        /// <summary>
        /// Initializes a new instance of the FnExpenseAdvance class
        /// </summary>
        /// <param name="active">Initial <see cref="FnExpenseAdvance.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseAdvance.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseAdvance.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseAdvance.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseAdvance.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseAdvance.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="FnExpenseAdvance.RowVersion" /> value</param>
        /// <param name="expense">Initial <see cref="FnExpenseAdvance.Expense" /> value</param>
        /// <param name="advance">Initial <see cref="FnExpenseAdvance.Advance" /> value</param>
        public FnExpenseAdvance(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, byte[] rowVersion, SCG.eAccounting.DTO.FnExpenseDocument expense, SCG.eAccounting.DTO.AvAdvanceDocument advance)
        {
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.expense = expense;
            this.advance = advance;
        }

        /// <summary>
        /// Minimal constructor for class FnExpenseAdvance
        /// </summary>
        /// <param name="active">Initial <see cref="FnExpenseAdvance.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseAdvance.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseAdvance.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseAdvance.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseAdvance.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseAdvance.UpdPgm" /> value</param>
        public FnExpenseAdvance(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
        {
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the FnExpenseAdvanceID for the current FnExpenseAdvance
        /// </summary>
        public virtual long FnExpenseAdvanceID
        {
            get { return this.fnExpenseAdvanceID; }
            set { this.fnExpenseAdvanceID = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current FnExpenseAdvance
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current FnExpenseAdvance
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current FnExpenseAdvance
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current FnExpenseAdvance
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current FnExpenseAdvance
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current FnExpenseAdvance
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current FnExpenseAdvance
        /// </summary>
        public virtual byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the Expense for the current FnExpenseAdvance
        /// </summary>
        public virtual SCG.eAccounting.DTO.FnExpenseDocument Expense
        {
            get { return this.expense; }
            set { this.expense = value; }
        }

        /// <summary>
        /// Gets or sets the Advance for the current FnExpenseAdvance
        /// </summary>
        public virtual SCG.eAccounting.DTO.AvAdvanceDocument Advance
        {
            get { return this.advance; }
            set { this.advance = value; }
        }

        #endregion
        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            if (!string.IsNullOrEmpty(dr["FnExpenseAdvanceID"].ToString()))
                this.FnExpenseAdvanceID = Convert.ToInt64(dr["FnExpenseAdvanceID"]);

            if (!string.IsNullOrEmpty(dr["ExpenseID"].ToString()))
                this.Expense = new FnExpenseDocument(Convert.ToInt64(dr["ExpenseID"]));

            if (!string.IsNullOrEmpty(dr["AdvanceID"].ToString()))
                this.Advance = new AvAdvanceDocument(Convert.ToInt64(dr["AdvanceID"]));

            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("FnExpenseAdvanceID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["FnExpenseAdvanceID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["FnExpenseAdvanceID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["FnExpenseAdvanceID", rowState].ToString());
        }
        #endregion
    }
}
