//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SS.DB.DTO;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
    /// <summary>
    /// POJO for FnExpenseAdvanceExchangeRate. This class is autogenerated
    /// </summary>
    [Serializable]
    public partial class FnExpenseAdvanceExchangeRate : INHibernateAdapterDTO<long>
    {
        #region Fields

        private long expenseAdvanceExchangeRateID;
        private double exchangeRate;
        private bool active;
        private long creBy;
        private DateTime creDate;
        private long updBy;
        private DateTime updDate;
        private string updPgm;
        private Byte[] rowVersion;
        private SCG.eAccounting.DTO.FnExpenseAdvance fnExpenseAdvance;
        private SS.DB.DTO.DbCurrency currency;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the FnExpenseAdvanceExchangeRate class
        /// </summary>
        public FnExpenseAdvanceExchangeRate()
        {
        }

        public FnExpenseAdvanceExchangeRate(long expenseAdvanceExchangeRateID)
        {
            this.expenseAdvanceExchangeRateID = expenseAdvanceExchangeRateID;
        }

        /// <summary>
        /// Initializes a new instance of the FnExpenseAdvanceExchangeRate class
        /// </summary>
        /// <param name="exchangeRate">Initial <see cref="FnExpenseAdvanceExchangeRate.ExchangeRate" /> value</param>
        /// <param name="active">Initial <see cref="FnExpenseAdvanceExchangeRate.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseAdvanceExchangeRate.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseAdvanceExchangeRate.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="FnExpenseAdvanceExchangeRate.RowVersion" /> value</param>
        /// <param name="fnExpenseAdvance">Initial <see cref="FnExpenseAdvanceExchangeRate.FnExpenseAdvance" /> value</param>
        /// <param name="currency">Initial <see cref="FnExpenseAdvanceExchangeRate.Currency" /> value</param>
        public FnExpenseAdvanceExchangeRate(double exchangeRate, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, Byte[] rowVersion, SCG.eAccounting.DTO.FnExpenseAdvance fnExpenseAdvance, SS.DB.DTO.DbCurrency currency)
        {
            this.exchangeRate = exchangeRate;
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.fnExpenseAdvance = fnExpenseAdvance;
            this.currency = currency;
        }

        /// <summary>
        /// Minimal constructor for class FnExpenseAdvanceExchangeRate
        /// </summary>
        /// <param name="active">Initial <see cref="FnExpenseAdvanceExchangeRate.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseAdvanceExchangeRate.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseAdvanceExchangeRate.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseAdvanceExchangeRate.UpdPgm" /> value</param>
        public FnExpenseAdvanceExchangeRate(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
        {
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the ExpenseAdvanceExchangeRateID for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual long ExpenseAdvanceExchangeRateID
        {
            get { return this.expenseAdvanceExchangeRateID; }
            set { this.expenseAdvanceExchangeRateID = value; }
        }

        /// <summary>
        /// Gets or sets the ExchangeRate for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual double ExchangeRate
        {
            get { return this.exchangeRate; }
            set { this.exchangeRate = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual Byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the FnExpenseAdvance for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual SCG.eAccounting.DTO.FnExpenseAdvance FnExpenseAdvance
        {
            get { return this.fnExpenseAdvance; }
            set { this.fnExpenseAdvance = value; }
        }

        /// <summary>
        /// Gets or sets the Currency for the current FnExpenseAdvanceExchangeRate
        /// </summary>
        public virtual SS.DB.DTO.DbCurrency Currency
        {
            get { return this.currency; }
            set { this.currency = value; }
        }

        #endregion
        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            if (!string.IsNullOrEmpty(dr["ExpenseAdvanceExchangeRateID"].ToString()))
                this.ExpenseAdvanceExchangeRateID = Convert.ToInt64(dr["ExpenseAdvanceExchangeRateID"]);
            if (!string.IsNullOrEmpty(dr["FnExpenseAdvanceID"].ToString()))
                this.FnExpenseAdvance = new FnExpenseAdvance(Convert.ToInt64(dr["FnExpenseAdvanceID"]));
            if (!string.IsNullOrEmpty(dr["CurrencyID"].ToString()))
                this.Currency = new DbCurrency(Convert.ToInt16(dr["CurrencyID"]));
            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("ExpenseAdvanceExchangeRateID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["ExpenseAdvanceExchangeRateID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["ExpenseAdvanceExchangeRateID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["ExpenseAdvanceExchangeRateID", rowState].ToString());
        }
        #endregion
    }
}
