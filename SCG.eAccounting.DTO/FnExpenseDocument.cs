//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SCG.DB.DTO;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
    /// <summary>
    /// POJO for FnExpenseDocument. This class is autogenerated
    /// </summary>
    [Serializable]
    public partial class FnExpenseDocument : INHibernateAdapterDTO<long>
    {
        #region Fields

        private long expenseID;
        private string expenseType;
        private string paymentType;
        private double totalExpense;
        private double totalAdvance;
        private bool? isBusinessPurpose;
        private bool? isTrainningPurpose;
        private bool? isOtherPurpose;
        private string otherPurposeDescription;
        private DateTime? fromDate;
        private DateTime? toDate;
        private string country;
        private string personalLevel;
        private double? exchangeRateForUSD;
        private double? exchangeRateForUSDAdvance;
        private double totalRemittance;
        private double differenceAmount;
        private bool active;
        private long creBy;
        private DateTime creDate;
        private long updBy;
        private DateTime updDate;
        private string updPgm;
        private Byte[] rowVersion;
        private SCG.eAccounting.DTO.SCGDocument document;
        private SCG.eAccounting.DTO.TADocument tADocument;
        private SCG.DB.DTO.DbServiceTeam serviceTeam;
        private SCG.DB.DTO.Dbpb pB;
        private string boxID;
        private string receivedMethod;
        private DateTime? payInValueDate;
        private string payInGLAccount;

        private short? mainCurrencyID;  //-> เก็บ main currencyID
        private short? localCurrencyID;  //-> เก็บ local currencyID
        private double? totalExpenseLocalCurrency;
        private double? totalAdvanceLocalCurrency;
        private double? totalRemittanceLocalCurrency;
        private double? differenceAmountLocalCurrency;
        private double? totalExpenseMainCurrency;
        private double? totalAdvanceMainCurrency;
        private double? totalRemittanceMainCurrency;
        private double? differenceAmountMainCurrecy;
        private double? exchangeRateMainToTHBCurrency;
        private double? exchangeRateForLocalCurrency;
        private bool? isRepOffice;
        private double? amountApproved;
        private double? amountBeforeVerify;
        private FixedAdvanceDocument fixedAdvanceDocument;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the FnExpenseDocument class
        /// </summary>
        public FnExpenseDocument()
        {
        }

        public FnExpenseDocument(long expenseID)
        {
            this.expenseID = expenseID;
        }

        /// <summary>
        /// Initializes a new instance of the FnExpenseDocument class
        /// </summary>
        /// <param name="expenseType">Initial <see cref="FnExpenseDocument.ExpenseType" /> value</param>
        /// <param name="paymentType">Initial <see cref="FnExpenseDocument.PaymentType" /> value</param>
        /// <param name="totalExpense">Initial <see cref="FnExpenseDocument.TotalExpense" /> value</param>
        /// <param name="totalAdvance">Initial <see cref="FnExpenseDocument.TotalAdvance" /> value</param>
        /// <param name="isBusinessPurpose">Initial <see cref="FnExpenseDocument.IsBusinessPurpose" /> value</param>
        /// <param name="isTrainningPurpose">Initial <see cref="FnExpenseDocument.IsTrainningPurpose" /> value</param>
        /// <param name="isOtherPurpose">Initial <see cref="FnExpenseDocument.IsOtherPurpose" /> value</param>
        /// <param name="otherPurposeDescription">Initial <see cref="FnExpenseDocument.OtherPurposeDescription" /> value</param>
        /// <param name="fromDate">Initial <see cref="FnExpenseDocument.FromDate" /> value</param>
        /// <param name="toDate">Initial <see cref="FnExpenseDocument.ToDate" /> value</param>
        /// <param name="country">Initial <see cref="FnExpenseDocument.Country" /> value</param>
        /// <param name="personalLevel">Initial <see cref="FnExpenseDocument.PersonalLevel" /> value</param>
        /// <param name="exchangeRateForUSD">Initial <see cref="FnExpenseDocument.ExchangeRateForUSD" /> value</param>
        /// <param name="exchangeRateForUSDAdvance">Initial <see cref="FnExpenseDocument.ExchangeRateForUSDAdvance" /> value</param>
        /// <param name="totalRemittance">Initial <see cref="FnExpenseDocument.TotalRemittance" /> value</param>
        /// <param name="differenceAmount">Initial <see cref="FnExpenseDocument.DifferenceAmount" /> value</param>
        /// <param name="active">Initial <see cref="FnExpenseDocument.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseDocument.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseDocument.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseDocument.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseDocument.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseDocument.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="FnExpenseDocument.RowVersion" /> value</param>
        /// <param name="document">Initial <see cref="FnExpenseDocument.Document" /> value</param>
        /// <param name="tADocument">Initial <see cref="FnExpenseDocument.TADocument" /> value</param>
        /// <param name="serviceTeam">Initial <see cref="FnExpenseDocument.ServiceTeam" /> value</param>
        /// <param name="pB">Initial <see cref="FnExpenseDocument.PB" /> value</param>
        public FnExpenseDocument(string expenseType, string paymentType, double totalExpense, double totalAdvance, bool? isBusinessPurpose, bool? isTrainningPurpose, bool? isOtherPurpose, string otherPurposeDescription, DateTime? fromDate, DateTime? toDate, string country, string personalLevel, double? exchangeRateForUSD, double? exchangeRateForUSDAdvance, double totalRemittance, double differenceAmount, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, Byte[] rowVersion, SCG.eAccounting.DTO.SCGDocument document, SCG.eAccounting.DTO.TADocument tADocument, SCG.DB.DTO.DbServiceTeam serviceTeam, SCG.DB.DTO.Dbpb pB, string boxID, string payInGLAccount, string receivedMethod, DateTime? payInValueDate)
        {
            this.expenseType = expenseType;
            this.paymentType = paymentType;
            this.totalExpense = totalExpense;
            this.totalAdvance = totalAdvance;
            this.isBusinessPurpose = isBusinessPurpose;
            this.isTrainningPurpose = isTrainningPurpose;
            this.isOtherPurpose = isOtherPurpose;
            this.otherPurposeDescription = otherPurposeDescription;
            this.fromDate = fromDate;
            this.toDate = toDate;
            this.country = country;
            this.personalLevel = personalLevel;
            this.exchangeRateForUSD = exchangeRateForUSD;
            this.exchangeRateForUSDAdvance = exchangeRateForUSDAdvance;
            this.totalRemittance = totalRemittance;
            this.differenceAmount = differenceAmount;
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.document = document;
            this.tADocument = tADocument;
            this.serviceTeam = serviceTeam;
            this.pB = pB;
            this.boxID = boxID;
            this.payInGLAccount = payInGLAccount;
            this.payInValueDate = payInValueDate;
            this.receivedMethod = receivedMethod;
        }

        /// <summary>
        /// Minimal constructor for class FnExpenseDocument
        /// </summary>
        /// <param name="paymentType">Initial <see cref="FnExpenseDocument.PaymentType" /> value</param>
        /// <param name="active">Initial <see cref="FnExpenseDocument.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseDocument.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseDocument.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseDocument.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseDocument.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseDocument.UpdPgm" /> value</param>
        public FnExpenseDocument(string paymentType, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
        {
            this.paymentType = paymentType;
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the ExpenseID for the current FnExpenseDocument
        /// </summary>
        public virtual long ExpenseID
        {
            get { return this.expenseID; }
            set { this.expenseID = value; }
        }

        /// <summary>
        /// Gets or sets the ExpenseType for the current FnExpenseDocument
        /// </summary>
        public virtual string ExpenseType
        {
            get { return this.expenseType; }
            set { this.expenseType = value; }
        }

        /// <summary>
        /// Gets or sets the PaymentType for the current FnExpenseDocument
        /// </summary>
        public virtual string PaymentType
        {
            get { return this.paymentType; }
            set { this.paymentType = value; }
        }

        /// <summary>
        /// Gets or sets the TotalExpense for the current FnExpenseDocument
        /// </summary>
        public virtual double TotalExpense
        {
            get { return this.totalExpense; }
            set { this.totalExpense = value; }
        }

        /// <summary>
        /// Gets or sets the TotalAdvance for the current FnExpenseDocument
        /// </summary>
        public virtual double TotalAdvance
        {
            get { return this.totalAdvance; }
            set { this.totalAdvance = value; }
        }

        /// <summary>
        /// Gets or sets the IsBusinessPurpose for the current FnExpenseDocument
        /// </summary>
        public virtual bool? IsBusinessPurpose
        {
            get { return this.isBusinessPurpose; }
            set { this.isBusinessPurpose = value; }
        }

        /// <summary>
        /// Gets or sets the IsTrainningPurpose for the current FnExpenseDocument
        /// </summary>
        public virtual bool? IsTrainningPurpose
        {
            get { return this.isTrainningPurpose; }
            set { this.isTrainningPurpose = value; }
        }

        /// <summary>
        /// Gets or sets the IsOtherPurpose for the current FnExpenseDocument
        /// </summary>
        public virtual bool? IsOtherPurpose
        {
            get { return this.isOtherPurpose; }
            set { this.isOtherPurpose = value; }
        }

        /// <summary>
        /// Gets or sets the OtherPurposeDescription for the current FnExpenseDocument
        /// </summary>
        public virtual string OtherPurposeDescription
        {
            get { return this.otherPurposeDescription; }
            set { this.otherPurposeDescription = value; }
        }

        /// <summary>
        /// Gets or sets the FromDate for the current FnExpenseDocument
        /// </summary>
        public virtual DateTime? FromDate
        {
            get { return this.fromDate; }
            set { this.fromDate = value; }
        }

        /// <summary>
        /// Gets or sets the ToDate for the current FnExpenseDocument
        /// </summary>
        public virtual DateTime? ToDate
        {
            get { return this.toDate; }
            set { this.toDate = value; }
        }

        /// <summary>
        /// Gets or sets the Country for the current FnExpenseDocument
        /// </summary>
        public virtual string Country
        {
            get { return this.country; }
            set { this.country = value; }
        }

        /// <summary>
        /// Gets or sets the PersonalLevel for the current FnExpenseDocument
        /// </summary>
        public virtual string PersonalLevel
        {
            get { return this.personalLevel; }
            set { this.personalLevel = value; }
        }

        /// <summary>
        /// Gets or sets the ExchangeRateForUSD for the current FnExpenseDocument
        /// </summary>
        public virtual double? ExchangeRateForUSD
        {
            get { return this.exchangeRateForUSD; }
            set { this.exchangeRateForUSD = value; }
        }

        /// <summary>
        /// Gets or sets the ExchangeRateForUSDAdvance for the current FnExpenseDocument
        /// </summary>
        public virtual double? ExchangeRateForUSDAdvance
        {
            get { return this.exchangeRateForUSDAdvance; }
            set { this.exchangeRateForUSDAdvance = value; }
        }

        /// <summary>
        /// Gets or sets the TotalRemittance for the current FnExpenseDocument
        /// </summary>
        public virtual double TotalRemittance
        {
            get { return this.totalRemittance; }
            set { this.totalRemittance = value; }
        }

        /// <summary>
        /// Gets or sets the DifferenceAmount for the current FnExpenseDocument
        /// </summary>
        public virtual double DifferenceAmount
        {
            get { return this.differenceAmount; }
            set { this.differenceAmount = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current FnExpenseDocument
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current FnExpenseDocument
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current FnExpenseDocument
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current FnExpenseDocument
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current FnExpenseDocument
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current FnExpenseDocument
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current FnExpenseDocument
        /// </summary>
        public virtual Byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the Document for the current FnExpenseDocument
        /// </summary>
        public virtual SCG.eAccounting.DTO.SCGDocument Document
        {
            get { return this.document; }
            set { this.document = value; }
        }

        /// <summary>
        /// Gets or sets the TADocument for the current FnExpenseDocument
        /// </summary>
        public virtual SCG.eAccounting.DTO.TADocument TADocument
        {
            get { return this.tADocument; }
            set { this.tADocument = value; }
        }

        /// <summary>
        /// Gets or sets the ServiceTeam for the current FnExpenseDocument
        /// </summary>
        public virtual SCG.DB.DTO.DbServiceTeam ServiceTeam
        {
            get { return this.serviceTeam; }
            set { this.serviceTeam = value; }
        }

        /// <summary>
        /// Gets or sets the PB for the current FnExpenseDocument
        /// </summary>
        public virtual SCG.DB.DTO.Dbpb PB
        {
            get { return this.pB; }
            set { this.pB = value; }
        }

        public virtual string BoxID
        {
            get { return this.boxID; }
            set { this.boxID = value; }
        }

        public virtual string ReceivedMethod
        {
            get { return this.receivedMethod;}
            set { this.receivedMethod = value;}
        }

        public virtual string PayInGLAccount
        {
            get { return this.payInGLAccount;}
            set { this.payInGLAccount = value;}
        }

        public virtual DateTime? PayInValueDate
        {
            get { return this.payInValueDate;}
            set { this.payInValueDate = value;}
        }

        private string remittancePostingStatus;
        public virtual string RemittancePostingStatus
        {
            get { return this.remittancePostingStatus; }
            set { this.remittancePostingStatus = value; }
        }

        public virtual short? MainCurrencyID
        {
            get { return this.mainCurrencyID; }
            set { this.mainCurrencyID = value; }
        }
        public virtual short? LocalCurrencyID
        {
            get { return this.localCurrencyID; }
            set { this.localCurrencyID = value; }
        }
        public virtual double? TotalExpenseLocalCurrency
        {
            get { return this.totalExpenseLocalCurrency; }
            set { this.totalExpenseLocalCurrency = value; }
        }
        public virtual double? TotalAdvanceLocalCurrency
        {
            get { return this.totalAdvanceLocalCurrency; }
            set { this.totalAdvanceLocalCurrency = value; }
        }
        public virtual double? TotalRemittanceLocalCurrency
        {
            get { return this.totalRemittanceLocalCurrency; }
            set { this.totalRemittanceLocalCurrency = value; }
        }
        public virtual double? DifferenceAmountLocalCurrency
        {
            get { return this.differenceAmountLocalCurrency; }
            set { this.differenceAmountLocalCurrency = value; }
        }
        public virtual double? TotalExpenseMainCurrency
        {
            get { return this.totalExpenseMainCurrency; }
            set { this.totalExpenseMainCurrency = value; }
        }
        public virtual double? TotalAdvanceMainCurrency
        {
            get { return this.totalAdvanceMainCurrency; }
            set { this.totalAdvanceMainCurrency = value; }
        }
        public virtual double? TotalRemittanceMainCurrency
        {
            get { return this.totalRemittanceMainCurrency; }
            set { this.totalRemittanceMainCurrency = value; }
        }
        public virtual double? DifferenceAmountMainCurrency
        {
            get { return this.differenceAmountMainCurrecy; }
            set { this.differenceAmountMainCurrecy = value; }
        }

        public virtual double? ExchangeRateForLocalCurrency
        {
            get { return this.exchangeRateForLocalCurrency; }
            set { this.exchangeRateForLocalCurrency = value; }
        }

        public virtual double? ExchangeRateMainToTHBCurrency
        {
            get { return this.exchangeRateMainToTHBCurrency; }
            set { this.exchangeRateMainToTHBCurrency = value; }
        }
        public virtual bool? IsRepOffice
        {
            get { return this.isRepOffice; }
            set { this.isRepOffice = value; }
        }

        public virtual double? AmountApproved
        {
            get { return this.amountApproved; }
            set { this.amountApproved = value; }
        }

        public virtual double? AmountBeforeVerify
        {
            get { return this.amountBeforeVerify; }
            set { this.amountBeforeVerify = value; }
        }

        public virtual FixedAdvanceDocument FixedAdvanceDocument
        {
            get { return this.fixedAdvanceDocument; }
            set { this.fixedAdvanceDocument = value; }
        }

        #endregion
        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.ExpenseID = Convert.ToInt64(dr["ExpenseID"]);
            if (!string.IsNullOrEmpty(dr["DocumentID"].ToString()))
                this.Document = new SCGDocument(Convert.ToInt64(dr["DocumentID"]));

            if (!string.IsNullOrEmpty(dr["TADocumentID"].ToString()))
                this.TADocument = new TADocument(Convert.ToInt64(dr["TADocumentID"]));
            else
                this.TADocument = null;

            if (!string.IsNullOrEmpty(dr["ServiceTeamID"].ToString()))
                this.ServiceTeam = new DbServiceTeam(Convert.ToInt64(dr["ServiceTeamID"]));

            if (!string.IsNullOrEmpty(dr["PBID"].ToString()))
                this.PB = new Dbpb(Convert.ToInt64(dr["PBID"]));
            else
                this.PB = null;

            this.ExpenseType = dr["ExpenseType"].ToString();
            this.PaymentType = dr["PaymentType"].ToString();

            if (!string.IsNullOrEmpty(dr["TotalExpense"].ToString()))
                this.TotalExpense = Convert.ToDouble(dr["TotalExpense"]);

            if (!string.IsNullOrEmpty(dr["TotalAdvance"].ToString()))
                this.TotalAdvance = Convert.ToDouble(dr["TotalAdvance"]);

            if (!string.IsNullOrEmpty(dr["IsBusinessPurpose"].ToString()))
                this.IsBusinessPurpose = (bool)dr["IsBusinessPurpose"];
            else
                this.isBusinessPurpose = null;

            if (!string.IsNullOrEmpty(dr["IsTrainningPurpose"].ToString()))
                this.IsTrainningPurpose = (bool)dr["IsTrainningPurpose"];
            else
                this.isTrainningPurpose = null;

            if (!string.IsNullOrEmpty(dr["IsOtherPurpose"].ToString()))
                this.IsOtherPurpose = (bool)dr["IsOtherPurpose"];
            else
                this.isOtherPurpose = null;

            this.OtherPurposeDescription = dr["OtherPurposeDescription"].ToString();

            if (!string.IsNullOrEmpty(dr["FromDate"].ToString()))
                this.FromDate = Convert.ToDateTime(dr["FromDate"]);
            else
                this.FromDate = null;

            if (!string.IsNullOrEmpty(dr["ToDate"].ToString()))
                this.ToDate = Convert.ToDateTime(dr["ToDate"]);
            else
                this.ToDate = null;

            this.Country = dr["Country"].ToString();
            this.PersonalLevel = dr["PersonalLevel"].ToString();

            if (!string.IsNullOrEmpty(dr["ExchangeRateForUSD"].ToString()))
                this.ExchangeRateForUSD = Convert.ToDouble(dr["ExchangeRateForUSD"]);

            if (!string.IsNullOrEmpty(dr["ExchangeRateForUSDAdvance"].ToString()))
                this.ExchangeRateForUSDAdvance = Convert.ToDouble(dr["ExchangeRateForUSDAdvance"]);

            if (!string.IsNullOrEmpty(dr["TotalRemittance"].ToString()))
                this.TotalRemittance = Convert.ToDouble(dr["TotalRemittance"]);

            if (!string.IsNullOrEmpty(dr["DifferenceAmount"].ToString()))
                this.DifferenceAmount = Convert.ToDouble(dr["DifferenceAmount"]);

            if (!string.IsNullOrEmpty(dr["FixedAdvanceDocumentID"].ToString()))
                this.FixedAdvanceDocument = new FixedAdvanceDocument(Convert.ToInt64(dr["FixedAdvanceDocumentID"]));
            else
                this.FixedAdvanceDocument = null;

            #region For RepOffice

            if (!string.IsNullOrEmpty(dr["MainCurrencyID"].ToString()))
                this.MainCurrencyID = Convert.ToInt16(dr["MainCurrencyID"]);

            if (!string.IsNullOrEmpty(dr["LocalCurrencyID"].ToString()))
                this.LocalCurrencyID = Convert.ToInt16(dr["LocalCurrencyID"]);

            if (!string.IsNullOrEmpty(dr["TotalExpenseLocalCurrency"].ToString()))
                this.TotalExpenseLocalCurrency = Convert.ToDouble(dr["TotalExpenseLocalCurrency"]);

            if (!string.IsNullOrEmpty(dr["TotalAdvanceLocalCurrency"].ToString()))
                this.TotalAdvanceLocalCurrency = Convert.ToDouble(dr["TotalAdvanceLocalCurrency"]);

            if (!string.IsNullOrEmpty(dr["TotalRemittanceLocalCurrency"].ToString()))
                this.TotalRemittanceLocalCurrency = Convert.ToDouble(dr["TotalRemittanceLocalCurrency"]);

            if (!string.IsNullOrEmpty(dr["DifferenceAmountLocalCurrency"].ToString()))
                this.DifferenceAmountLocalCurrency = Convert.ToDouble(dr["DifferenceAmountLocalCurrency"]);

            if (!string.IsNullOrEmpty(dr["TotalExpenseMainCurrency"].ToString()))
                this.TotalExpenseMainCurrency = Convert.ToDouble(dr["TotalExpenseMainCurrency"]);

            if (!string.IsNullOrEmpty(dr["TotalAdvanceMainCurrency"].ToString()))
                this.TotalAdvanceMainCurrency = Convert.ToDouble(dr["TotalAdvanceMainCurrency"]);

            if (!string.IsNullOrEmpty(dr["TotalRemittanceMainCurrency"].ToString()))
                this.TotalRemittanceMainCurrency = Convert.ToDouble(dr["TotalRemittanceMainCurrency"]);

            if (!string.IsNullOrEmpty(dr["DifferenceAmountMainCurrency"].ToString()))
                this.DifferenceAmountMainCurrency = Convert.ToDouble(dr["DifferenceAmountMainCurrency"]);

            if (!string.IsNullOrEmpty(dr["ExchangeRateMainToTHBCurrency"].ToString()))
                this.ExchangeRateMainToTHBCurrency = Convert.ToDouble(dr["ExchangeRateMainToTHBCurrency"]);

            if (!string.IsNullOrEmpty(dr["ExchangeRateForLocalCurrency"].ToString()))
                this.ExchangeRateForLocalCurrency = Convert.ToDouble(dr["ExchangeRateForLocalCurrency"]);

            if (!string.IsNullOrEmpty(dr["IsRepOffice"].ToString()) && (bool)dr["IsRepOffice"])
            {
                this.IsRepOffice = (bool)dr["IsRepOffice"];
            }
            else
            {
                this.IsRepOffice = false;
            }
            #endregion

            if (!string.IsNullOrEmpty(dr["AmountApproved"].ToString()))
                this.AmountApproved = Convert.ToDouble(dr["AmountApproved"]);

            this.BoxID = dr["BoxID"].ToString();
            this.RemittancePostingStatus = dr["RemittancePostingStatus"].ToString();

            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("ExpenseID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["ExpenseID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["ExpenseID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["ExpenseID", rowState].ToString());
        }
        #endregion        
    }
}
