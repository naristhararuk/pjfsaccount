//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SCG.DB.DTO;
using System.Data;
using SS.Standard.Data.NHibernate.DTO;

namespace SCG.eAccounting.DTO
{
	/// <summary>
	/// POJO for FnExpenseInvoiceItem. This class is autogenerated
	/// </summary>
	[Serializable]
	public partial class FnExpenseInvoiceItem : INHibernateAdapterDTO<long>
	{
		#region Fields
		
		private long invoiceItemID;
		private long? currencyID;
		private string description;
		private double? currencyAmount;
		private double? amount;
		private double? exchangeRate;
		private string referenceNo;
        private string vendorCodeAP;
		private string saleOrder;
		private string saleItem;
		private bool active;
		private long creBy;
		private DateTime creDate;
		private long updBy;
		private DateTime updDate;
		private string updPgm;
        private Byte[] rowVersion;
		private SCG.eAccounting.DTO.FnExpenseInvoice invoice;
		private SCG.DB.DTO.DbCostCenter costCenter;
		private SCG.DB.DTO.DbAccount account;
		private SCG.DB.DTO.DbInternalOrder iO;
        private double nonDeductAmount;
        private short? mainCurrencyID;
        private double? mainCurrencyAmount;
        private double? localCurrencyAmount;

		#endregion

		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FnExpenseInvoiceItem class
		/// </summary>
		public FnExpenseInvoiceItem()
		{
		}

		public FnExpenseInvoiceItem(long invoiceItemID)
		{
			this.invoiceItemID = invoiceItemID;
		}
	
		/// <summary>
		/// Initializes a new instance of the FnExpenseInvoiceItem class
		/// </summary>
		/// <param name="currencyID">Initial <see cref="FnExpenseInvoiceItem.CurrencyID" /> value</param>
		/// <param name="description">Initial <see cref="FnExpenseInvoiceItem.Description" /> value</param>
		/// <param name="currencyAmount">Initial <see cref="FnExpenseInvoiceItem.CurrencyAmount" /> value</param>
		/// <param name="amount">Initial <see cref="FnExpenseInvoiceItem.Amount" /> value</param>
		/// <param name="exchangeRate">Initial <see cref="FnExpenseInvoiceItem.ExchangeRate" /> value</param>
		/// <param name="referenceNo">Initial <see cref="FnExpenseInvoiceItem.ReferenceNo" /> value</param>
		/// <param name="saleOrder">Initial <see cref="FnExpenseInvoiceItem.SaleOrder" /> value</param>
		/// <param name="saleItem">Initial <see cref="FnExpenseInvoiceItem.SaleItem" /> value</param>
		/// <param name="active">Initial <see cref="FnExpenseInvoiceItem.Active" /> value</param>
		/// <param name="creBy">Initial <see cref="FnExpenseInvoiceItem.CreBy" /> value</param>
		/// <param name="creDate">Initial <see cref="FnExpenseInvoiceItem.CreDate" /> value</param>
		/// <param name="updBy">Initial <see cref="FnExpenseInvoiceItem.UpdBy" /> value</param>
		/// <param name="updDate">Initial <see cref="FnExpenseInvoiceItem.UpdDate" /> value</param>
		/// <param name="updPgm">Initial <see cref="FnExpenseInvoiceItem.UpdPgm" /> value</param>
		/// <param name="rowVersion">Initial <see cref="FnExpenseInvoiceItem.RowVersion" /> value</param>
		/// <param name="invoice">Initial <see cref="FnExpenseInvoiceItem.Invoice" /> value</param>
		/// <param name="costCenter">Initial <see cref="FnExpenseInvoiceItem.CostCenter" /> value</param>
		/// <param name="account">Initial <see cref="FnExpenseInvoiceItem.Account" /> value</param>
		/// <param name="iO">Initial <see cref="FnExpenseInvoiceItem.IO" /> value</param>
        public FnExpenseInvoiceItem(long? currencyID, string description, double? currencyAmount, double? amount, double? exchangeRate, string referenceNo,string vendorCodeAP, string saleOrder, string saleItem, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, Byte[] rowVersion, SCG.eAccounting.DTO.FnExpenseInvoice invoice, SCG.DB.DTO.DbCostCenter costCenter, SCG.DB.DTO.DbAccount account, SCG.DB.DTO.DbInternalOrder iO, double nonDeductAmount)
		{
			this.currencyID = currencyID;
			this.description = description;
			this.currencyAmount = currencyAmount;
			this.amount = amount;
			this.exchangeRate = exchangeRate;
			this.referenceNo = referenceNo;
            this.vendorCodeAP = vendorCodeAP;
			this.saleOrder = saleOrder;
			this.saleItem = saleItem;
			this.active = active;
			this.creBy = creBy;
			this.creDate = creDate;
			this.updBy = updBy;
			this.updDate = updDate;
			this.updPgm = updPgm;
			this.rowVersion = rowVersion;
			this.invoice = invoice;
			this.costCenter = costCenter;
			this.account = account;
			this.iO = iO;
            this.nonDeductAmount = nonDeductAmount;
		}
	
		/// <summary>
		/// Minimal constructor for class FnExpenseInvoiceItem
		/// </summary>
		/// <param name="active">Initial <see cref="FnExpenseInvoiceItem.Active" /> value</param>
		/// <param name="creBy">Initial <see cref="FnExpenseInvoiceItem.CreBy" /> value</param>
		/// <param name="creDate">Initial <see cref="FnExpenseInvoiceItem.CreDate" /> value</param>
		/// <param name="updBy">Initial <see cref="FnExpenseInvoiceItem.UpdBy" /> value</param>
		/// <param name="updDate">Initial <see cref="FnExpenseInvoiceItem.UpdDate" /> value</param>
		/// <param name="updPgm">Initial <see cref="FnExpenseInvoiceItem.UpdPgm" /> value</param>
		public FnExpenseInvoiceItem(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
		{
			this.active = active;
			this.creBy = creBy;
			this.creDate = creDate;
			this.updBy = updBy;
			this.updDate = updDate;
			this.updPgm = updPgm;
		}
		#endregion
	
		#region Properties
		
		/// <summary>
		/// Gets or sets the InvoiceItemID for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual long InvoiceItemID
		{
			get { return this.invoiceItemID; }
			set { this.invoiceItemID = value; }
		}
		
		/// <summary>
		/// Gets or sets the CurrencyID for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual long? CurrencyID
		{
			get { return this.currencyID; }
			set { this.currencyID = value; }
		}
		
		/// <summary>
		/// Gets or sets the Description for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual string Description
		{
			get { return this.description; }
			set { this.description = value; }
		}
		
		/// <summary>
		/// Gets or sets the CurrencyAmount for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual double? CurrencyAmount
		{
			get { return this.currencyAmount; }
			set { this.currencyAmount = value; }
		}
		
		/// <summary>
		/// Gets or sets the Amount for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual double? Amount
		{
			get { return this.amount; }
			set { this.amount = value; }
		}
		
		/// <summary>
		/// Gets or sets the ExchangeRate for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual double? ExchangeRate
		{
			get { return this.exchangeRate; }
			set { this.exchangeRate = value; }
		}
		
		/// <summary>
		/// Gets or sets the ReferenceNo for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual string ReferenceNo
		{
			get { return this.referenceNo; }
			set { this.referenceNo = value; }
		}
        public virtual string VendorCodeAP
        {
            get { return this.vendorCodeAP; }
            set { this.vendorCodeAP = value; }
        }
		/// <summary>
		/// Gets or sets the SaleOrder for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual string SaleOrder
		{
			get { return this.saleOrder; }
			set { this.saleOrder = value; }
		}
		
		/// <summary>
		/// Gets or sets the SaleItem for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual string SaleItem
		{
			get { return this.saleItem; }
			set { this.saleItem = value; }
		}
		
		/// <summary>
		/// Gets or sets the Active for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual bool Active
		{
			get { return this.active; }
			set { this.active = value; }
		}
		
		/// <summary>
		/// Gets or sets the CreBy for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual long CreBy
		{
			get { return this.creBy; }
			set { this.creBy = value; }
		}
		
		/// <summary>
		/// Gets or sets the CreDate for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual DateTime CreDate
		{
			get { return this.creDate; }
			set { this.creDate = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdBy for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual long UpdBy
		{
			get { return this.updBy; }
			set { this.updBy = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdDate for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual DateTime UpdDate
		{
			get { return this.updDate; }
			set { this.updDate = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdPgm for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual string UpdPgm
		{
			get { return this.updPgm; }
			set { this.updPgm = value; }
		}
		
		/// <summary>
		/// Gets or sets the RowVersion for the current FnExpenseInvoiceItem
		/// </summary>
        public virtual Byte[] RowVersion
		{
			get { return this.rowVersion; }
			set { this.rowVersion = value; }
		}
		
		/// <summary>
		/// Gets or sets the Invoice for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual SCG.eAccounting.DTO.FnExpenseInvoice Invoice
		{
			get { return this.invoice; }
			set { this.invoice = value; }
		}
		
		/// <summary>
		/// Gets or sets the CostCenter for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual SCG.DB.DTO.DbCostCenter CostCenter
		{
			get { return this.costCenter; }
			set { this.costCenter = value; }
		}
		
		/// <summary>
		/// Gets or sets the Account for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual SCG.DB.DTO.DbAccount Account
		{
			get { return this.account; }
			set { this.account = value; }
		}
		
		/// <summary>
		/// Gets or sets the IO for the current FnExpenseInvoiceItem
		/// </summary>
		public virtual SCG.DB.DTO.DbInternalOrder IO
		{
			get { return this.iO; }
			set { this.iO = value; }
		}

        /// <summary>
        /// Gets or sets the NonDeductAmount for the current FnExpenseInvoiceItem
        /// </summary>
        public virtual double NonDeductAmount
        {
            get { return this.nonDeductAmount; }
            set { this.nonDeductAmount = value; }
        }

        public virtual short? MainCurrencyID
        {
            get { return this.mainCurrencyID; }
            set { this.mainCurrencyID = value; }
        }

        public virtual double? MainCurrencyAmount
        {
            get { return this.mainCurrencyAmount; }
            set { this.mainCurrencyAmount = value; }
        }

        public virtual double? LocalCurrencyAmount
        {
            get { return this.localCurrencyAmount; }
            set { this.localCurrencyAmount = value; }
        }

        //public virtual 
		#endregion
        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.InvoiceItemID = Convert.ToInt64(dr["InvoiceItemID"]);
            this.Invoice = new FnExpenseInvoice(Convert.ToInt64(dr["InvoiceID"]));
            this.CostCenter =
                (dr["CostCenterID"] == System.DBNull.Value ? null: new DbCostCenter(Convert.ToInt64(dr["CostCenterID"])));
            this.Account = 
                (dr["AccountID"] == System.DBNull.Value ? null: new DbAccount(Convert.ToInt64(dr["AccountID"])));
            this.IO = 
                (dr["IOID"] == System.DBNull.Value ? null: new DbInternalOrder(Convert.ToInt64(dr["IOID"])));
            if (!string.IsNullOrEmpty(dr["CurrencyID"].ToString()))
                this.CurrencyID = Convert.ToInt64(dr["CurrencyID"]);
            this.Description = dr["Description"].ToString();
            if (!string.IsNullOrEmpty(dr["CurrencyAmount"].ToString()))
                this.CurrencyAmount = Convert.ToDouble(dr["CurrencyAmount"]);
            this.Amount = Convert.ToDouble(dr["Amount"]);
            if (!string.IsNullOrEmpty(dr["ExchangeRate"].ToString()))
                this.ExchangeRate = Convert.ToDouble(dr["ExchangeRate"]);
            if (!string.IsNullOrEmpty(dr["NondeductAmount"].ToString()))
                this.NonDeductAmount = Convert.ToDouble(dr["NondeductAmount"]);
            this.ReferenceNo = dr["ReferenceNo"].ToString();
            this.VendorCodeAP = dr["VendorCodeAP"].ToString();
            this.SaleOrder = dr["SaleOrder"].ToString();
            this.SaleItem = dr["SaleItem"].ToString();
            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();

            if (!string.IsNullOrEmpty(dr["MainCurrencyID"].ToString()))
                this.MainCurrencyID = Convert.ToInt16(dr["MainCurrencyID"]);
            if (!string.IsNullOrEmpty(dr["MainCurrencyAmount"].ToString()))
                this.MainCurrencyAmount = Convert.ToDouble(dr["MainCurrencyAmount"]);
            if (!string.IsNullOrEmpty(dr["LocalCurrencyAmount"].ToString()))
                this.LocalCurrencyAmount = Convert.ToDouble(dr["LocalCurrencyAmount"]);
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("InvoiceItemID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["InvoiceItemID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["InvoiceItemID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["InvoiceItemID", rowState].ToString());
        }
        #endregion
	}
}
