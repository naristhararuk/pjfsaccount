//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
    /// <summary>
    /// POJO for FnExpenseMileageItem. This class is autogenerated
    /// </summary>
    [Serializable]
    public partial class FnExpenseMileageItem : INHibernateAdapterDTO<long>
    {
        #region Fields

        private long expenseMileageItemID;
        private DateTime? travelDate;
        private string locationFrom;
        private string locationTo;
        private double? carMeterStart;
        private double? carMeterEnd;
        private double distanceTotal;
        private double distanceFirst100Km;
        private double distanceExceed100Km;
        private double distanceAdjust;
        private double distanceNet;
        private bool active;
        private long creBy;
        private DateTime creDate;
        private long updBy;
        private DateTime updDate;
        private string updPgm;
        private Byte[] rowVersion;
        private SCG.eAccounting.DTO.FnExpenseMileage expenseMileage;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the FnExpenseMileageItem class
        /// </summary>
        public FnExpenseMileageItem()
        {
        }

        public FnExpenseMileageItem(long expenseMileageItemID)
        {
            this.expenseMileageItemID = expenseMileageItemID;
        }

        /// <summary>
        /// Initializes a new instance of the FnExpenseMileageItem class
        /// </summary>
        /// <param name="travelDate">Initial <see cref="FnExpenseMileageItem.TravelDate" /> value</param>
        /// <param name="locationFrom">Initial <see cref="FnExpenseMileageItem.LocationFrom" /> value</param>
        /// <param name="locationTo">Initial <see cref="FnExpenseMileageItem.LocationTo" /> value</param>
        /// <param name="carMeterStart">Initial <see cref="FnExpenseMileageItem.CarMeterStart" /> value</param>
        /// <param name="carMeterEnd">Initial <see cref="FnExpenseMileageItem.CarMeterEnd" /> value</param>
        /// <param name="distanceTotal">Initial <see cref="FnExpenseMileageItem.DistanceTotal" /> value</param>
        /// <param name="distanceFirst100Km">Initial <see cref="FnExpenseMileageItem.DistanceFirst100Km" /> value</param>
        /// <param name="distanceExceed100Km">Initial <see cref="FnExpenseMileageItem.DistanceExceed100Km" /> value</param>
        /// <param name="active">Initial <see cref="FnExpenseMileageItem.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseMileageItem.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseMileageItem.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseMileageItem.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseMileageItem.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseMileageItem.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="FnExpenseMileageItem.RowVersion" /> value</param>
        /// <param name="expenseMileage">Initial <see cref="FnExpenseMileageItem.ExpenseMileage" /> value</param>
        public FnExpenseMileageItem(DateTime? travelDate, string locationFrom, string locationTo, double? carMeterStart, double? carMeterEnd, double distanceTotal, double distanceFirst100Km, double distanceExceed100Km, double distanceAdjust, double distanceNet, bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm, Byte[] rowVersion, SCG.eAccounting.DTO.FnExpenseMileage expenseMileage)
        {
            this.travelDate = travelDate;
            this.locationFrom = locationFrom;
            this.locationTo = locationTo;
            this.carMeterStart = carMeterStart;
            this.carMeterEnd = carMeterEnd;
            this.distanceTotal = distanceTotal;
            this.distanceFirst100Km = distanceFirst100Km;
            this.distanceExceed100Km = distanceExceed100Km;
            this.distanceAdjust = distanceAdjust;
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.expenseMileage = expenseMileage;
        }

        /// <summary>
        /// Minimal constructor for class FnExpenseMileageItem
        /// </summary>
        /// <param name="active">Initial <see cref="FnExpenseMileageItem.Active" /> value</param>
        /// <param name="creBy">Initial <see cref="FnExpenseMileageItem.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="FnExpenseMileageItem.CreDate" /> value</param>
        /// <param name="updBy">Initial <see cref="FnExpenseMileageItem.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="FnExpenseMileageItem.UpdDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="FnExpenseMileageItem.UpdPgm" /> value</param>
        public FnExpenseMileageItem(bool active, long creBy, DateTime creDate, long updBy, DateTime updDate, string updPgm)
        {
            this.active = active;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updBy = updBy;
            this.updDate = updDate;
            this.updPgm = updPgm;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the ExpenseMileageItemID for the current FnExpenseMileageItem
        /// </summary>
        public virtual long ExpenseMileageItemID
        {
            get { return this.expenseMileageItemID; }
            set { this.expenseMileageItemID = value; }
        }

        /// <summary>
        /// Gets or sets the TravelDate for the current FnExpenseMileageItem
        /// </summary>
        public virtual DateTime? TravelDate
        {
            get { return this.travelDate; }
            set { this.travelDate = value; }
        }

        /// <summary>
        /// Gets or sets the LocationFrom for the current FnExpenseMileageItem
        /// </summary>
        public virtual string LocationFrom
        {
            get { return this.locationFrom; }
            set { this.locationFrom = value; }
        }

        /// <summary>
        /// Gets or sets the LocationTo for the current FnExpenseMileageItem
        /// </summary>
        public virtual string LocationTo
        {
            get { return this.locationTo; }
            set { this.locationTo = value; }
        }

        /// <summary>
        /// Gets or sets the CarMeterStart for the current FnExpenseMileageItem
        /// </summary>
        public virtual double? CarMeterStart
        {
            get { return this.carMeterStart; }
            set { this.carMeterStart = value; }
        }

        /// <summary>
        /// Gets or sets the CarMeterEnd for the current FnExpenseMileageItem
        /// </summary>
        public virtual double? CarMeterEnd
        {
            get { return this.carMeterEnd; }
            set { this.carMeterEnd = value; }
        }

        /// <summary>
        /// Gets or sets the DistanceTotal for the current FnExpenseMileageItem
        /// </summary>
        public virtual double DistanceTotal
        {
            get { return this.distanceTotal; }
            set { this.distanceTotal = value; }
        }

        /// <summary>
        /// Gets or sets the DistanceFirst100Km for the current FnExpenseMileageItem
        /// </summary>
        public virtual double DistanceFirst100Km
        {
            get { return this.distanceFirst100Km; }
            set { this.distanceFirst100Km = value; }
        }

        /// <summary>
        /// Gets or sets the DistanceExceed100Km for the current FnExpenseMileageItem
        /// </summary>
        public virtual double DistanceExceed100Km
        {
            get { return this.distanceExceed100Km; }
            set { this.distanceExceed100Km = value; }
        }

        /// <summary>
        /// Gets or sets the DistanceAdjust for the current FnExpenseMileageItem
        /// </summary>
        public virtual double DistanceAdjust
        {
            get { return this.distanceAdjust; }
            set { this.distanceAdjust = value; }
        }

        /// <summary>
        /// Gets or sets the DistanceNet for the current FnExpenseMileageItem
        /// </summary>
        public virtual double DistanceNet
        {
            get { return this.distanceNet; }
            set { this.distanceNet = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current FnExpenseMileageItem
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current FnExpenseMileageItem
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current FnExpenseMileageItem
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current FnExpenseMileageItem
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current FnExpenseMileageItem
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current FnExpenseMileageItem
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current FnExpenseMileageItem
        /// </summary>
        public virtual Byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the ExpenseMileage for the current FnExpenseMileageItem
        /// </summary>
        public virtual SCG.eAccounting.DTO.FnExpenseMileage ExpenseMileage
        {
            get { return this.expenseMileage; }
            set { this.expenseMileage = value; }
        }

        #endregion
        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.ExpenseMileageItemID = Convert.ToInt64(dr["ExpenseMileageItemID"]);
            if (!string.IsNullOrEmpty(dr["ExpenseMileageID"].ToString()))
                this.ExpenseMileage = new FnExpenseMileage(Convert.ToInt64(dr["ExpenseMileageID"]));

            if (!string.IsNullOrEmpty(dr["TravelDate"].ToString()) && !Convert.ToDateTime(dr["TravelDate"]).Equals(DateTime.MinValue))
                this.TravelDate = Convert.ToDateTime(dr["TravelDate"]);

            this.LocationFrom = dr["LocationFrom"].ToString();
            this.LocationTo = dr["LocationTo"].ToString();

            if (!string.IsNullOrEmpty(dr["CarMeterStart"].ToString()))
                this.CarMeterStart = Convert.ToDouble(dr["CarMeterStart"]);

            if (!string.IsNullOrEmpty(dr["CarMeterEnd"].ToString()))
                this.CarMeterEnd = Convert.ToDouble(dr["CarMeterEnd"]);

            if (!string.IsNullOrEmpty(dr["DistanceTotal"].ToString()))
                this.DistanceTotal = Convert.ToDouble(dr["DistanceTotal"]);

            if (!string.IsNullOrEmpty(dr["DistanceFirst100Km"].ToString()))
                this.DistanceFirst100Km = Convert.ToDouble(dr["DistanceFirst100Km"]);

            if (!string.IsNullOrEmpty(dr["DistanceExceed100Km"].ToString()))
                this.DistanceExceed100Km = Convert.ToDouble(dr["DistanceExceed100Km"]);

            if (!string.IsNullOrEmpty(dr["DistanceAdjust"].ToString()))
                this.DistanceAdjust = Convert.ToDouble(dr["DistanceAdjust"]);

            if (!string.IsNullOrEmpty(dr["DistanceNet"].ToString()))
                this.DistanceNet = Convert.ToDouble(dr["DistanceNet"]);

            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("ExpenseMileageItemID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["ExpenseMileageItemID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["ExpenseMileageItemID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["ExpenseMileageItemID", rowState].ToString());
        }
        #endregion
    }
}
