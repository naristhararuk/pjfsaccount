//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using SCG.DB.DTO;
using SCG.eAccounting.DTO.DataSet;
using SS.SU.DTO;
using SS.Standard.Data.NHibernate.DTO;
using System.Data;

namespace SCG.eAccounting.DTO
{
	/// <summary>
	/// POJO for FnRemittance. This class is autogenerated
	/// </summary>
	[Serializable]
	public partial class FnRemittance : INHibernateAdapterDTO<long>
	{
		#region Fields
		
		private long remittanceID;
		private long tADocumentID;
        private double totalAmount;
        private bool isFullClearing;
        private bool active;
		private long updBy;
		private DateTime updDate;
		private long creBy;
		private DateTime creDate;
		private string updPgm;
		private Byte[] rowVersion;
		private SCG.eAccounting.DTO.SCGDocument document;
		private SCG.DB.DTO.Dbpb pB;
        private double mainCurrencyAmount;
        private short mainCurrencyID;
        private bool? isRepOffice;

		#endregion

		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the FnRemittance class
		/// </summary>
		public FnRemittance()
		{
		}

		public FnRemittance(long remittanceID)
		{
			this.remittanceID = remittanceID;
		}
	
		/// <summary>
		/// Initializes a new instance of the FnRemittance class
		/// </summary>
		/// <param name="tADocumentID">Initial <see cref="FnRemittance.TADocumentID" /> value</param>
		/// <param name="active">Initial <see cref="FnRemittance.Active" /> value</param>
		/// <param name="updBy">Initial <see cref="FnRemittance.UpdBy" /> value</param>
		/// <param name="updDate">Initial <see cref="FnRemittance.UpdDate" /> value</param>
		/// <param name="creBy">Initial <see cref="FnRemittance.CreBy" /> value</param>
		/// <param name="creDate">Initial <see cref="FnRemittance.CreDate" /> value</param>
		/// <param name="updPgm">Initial <see cref="FnRemittance.UpdPgm" /> value</param>
		/// <param name="rowVersion">Initial <see cref="FnRemittance.RowVersion" /> value</param>
		/// <param name="document">Initial <see cref="FnRemittance.Document" /> value</param>
		/// <param name="pB">Initial <see cref="FnRemittance.PB" /> value</param>
		public FnRemittance(long tADocumentID,bool isFullClearing, bool active, long updBy, DateTime updDate, long creBy, DateTime creDate, string updPgm, Byte[] rowVersion, SCG.eAccounting.DTO.SCGDocument document, SCG.DB.DTO.Dbpb pB,double maincurrencyamount,short mainCurrencyID)
		{
			this.tADocumentID = tADocumentID;
            this.isFullClearing = isFullClearing;
			this.active = active;
			this.updBy = updBy;
			this.updDate = updDate;
			this.creBy = creBy;
			this.creDate = creDate;
			this.updPgm = updPgm;
			this.rowVersion = rowVersion;
			this.document = document;
			this.pB = pB;
            this.mainCurrencyAmount = maincurrencyamount;
            this.mainCurrencyID = mainCurrencyID;
		}
	
		/// <summary>
		/// Minimal constructor for class FnRemittance
		/// </summary>
		/// <param name="active">Initial <see cref="FnRemittance.Active" /> value</param>
		/// <param name="updBy">Initial <see cref="FnRemittance.UpdBy" /> value</param>
		/// <param name="updDate">Initial <see cref="FnRemittance.UpdDate" /> value</param>
		/// <param name="creBy">Initial <see cref="FnRemittance.CreBy" /> value</param>
		/// <param name="creDate">Initial <see cref="FnRemittance.CreDate" /> value</param>
		/// <param name="updPgm">Initial <see cref="FnRemittance.UpdPgm" /> value</param>
		public FnRemittance(bool active, long updBy, DateTime updDate, long creBy, DateTime creDate, string updPgm)
		{
			this.active = active;
			this.updBy = updBy;
			this.updDate = updDate;
			this.creBy = creBy;
			this.creDate = creDate;
			this.updPgm = updPgm;
		}
		#endregion
	
		#region Properties
		
		/// <summary>
		/// Gets or sets the RemittanceID for the current FnRemittance
		/// </summary>
		public virtual long RemittanceID
		{
			get { return this.remittanceID; }
			set { this.remittanceID = value; }
		}
		
		/// <summary>
		/// Gets or sets the TADocumentID for the current FnRemittance
		/// </summary>
		public virtual long TADocumentID
		{
			get { return this.tADocumentID; }
			set { this.tADocumentID = value; }
		}

        /// <summary>
        /// Gets or sets the TotalAmount for the current FnRemittance
        /// </summary>
        public virtual double TotalAmount
        {
            get { return this.totalAmount; }
            set { this.totalAmount = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current FnRemittance
        /// </summary>
        public virtual bool IsFullClearing
        {
            get { return this.isFullClearing; }
            set { this.isFullClearing = value; }
        }

		/// <summary>
		/// Gets or sets the Active for the current FnRemittance
		/// </summary>
		public virtual bool Active
		{
			get { return this.active; }
			set { this.active = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdBy for the current FnRemittance
		/// </summary>
		public virtual long UpdBy
		{
			get { return this.updBy; }
			set { this.updBy = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdDate for the current FnRemittance
		/// </summary>
		public virtual DateTime UpdDate
		{
			get { return this.updDate; }
			set { this.updDate = value; }
		}
		
		/// <summary>
		/// Gets or sets the CreBy for the current FnRemittance
		/// </summary>
		public virtual long CreBy
		{
			get { return this.creBy; }
			set { this.creBy = value; }
		}
		
		/// <summary>
		/// Gets or sets the CreDate for the current FnRemittance
		/// </summary>
		public virtual DateTime CreDate
		{
			get { return this.creDate; }
			set { this.creDate = value; }
		}
		
		/// <summary>
		/// Gets or sets the UpdPgm for the current FnRemittance
		/// </summary>
		public virtual string UpdPgm
		{
			get { return this.updPgm; }
			set { this.updPgm = value; }
		}
		
		/// <summary>
		/// Gets or sets the RowVersion for the current FnRemittance
		/// </summary>
		public virtual Byte[] RowVersion
		{
			get { return this.rowVersion; }
			set { this.rowVersion = value; }
		}
		
		/// <summary>
		/// Gets or sets the Document for the current FnRemittance
		/// </summary>
		public virtual SCG.eAccounting.DTO.SCGDocument Document
		{
			get { return this.document; }
			set { this.document = value; }
		}
		
		/// <summary>
		/// Gets or sets the PB for the current FnRemittance
		/// </summary>
		public virtual SCG.DB.DTO.Dbpb PB
		{
			get { return this.pB; }
			set { this.pB = value; }
		}

        public virtual double MainCurrencyAmount {
            get { return this.mainCurrencyAmount; }
            set { this.mainCurrencyAmount = value; }
        }

        public virtual short MainCurrencyID
        {
            get { return this.mainCurrencyID; }
            set { this.mainCurrencyID = value; }
        }
		

        public virtual bool? IsRepOffice
        {
            get { return this.isRepOffice; }
            set { this.isRepOffice = value; }
        }
		#endregion

        #region Old 24-March-2009
        //public FnRemittance(FnRemittanceDataset.FnRemittanceRow remittanceRow)
        //{
        //    this.remittanceID = remittanceRow.RemittanceID;
        //    this.tADocumentID = remittanceRow.TADocumentID;
        //    this.document = new SCGDocument(remittanceRow.DocumentID);
        //    this.pB = new Dbpb(remittanceRow.PBID);
        //    this.Active = remittanceRow.Active;
        //    this.CreBy = remittanceRow.CreBy;
        //    this.CreDate = remittanceRow.CreDate;
        //    this.UpdBy = remittanceRow.UpdBy;
        //    this.UpdDate = remittanceRow.UpdDate;
        //    this.UpdPgm = remittanceRow.UpdPgm;
        //}
        #endregion

        #region INHibernateAdapterDTO<long> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.RemittanceID = Convert.ToInt64(dr["RemittanceID"]);
            if (!string.IsNullOrEmpty(dr["TADocumentID"].ToString()))
            {
                this.TADocumentID = Convert.ToInt64(dr["TADocumentID"].ToString());
            }
            if (!string.IsNullOrEmpty(dr["DocumentID"].ToString()))
            {
                this.Document = new SCGDocument(Convert.ToInt64(dr["DocumentID"].ToString()));
            }
            if (!string.IsNullOrEmpty(dr["PBID"].ToString()))
            {
                this.PB = new Dbpb(Convert.ToInt64(dr["PBID"].ToString()));
            }
            if (!string.IsNullOrEmpty(dr["MainCurrencyAmount"].ToString()))
            {
                this.MainCurrencyAmount = Convert.ToDouble(dr["MainCurrencyAmount"].ToString());
            }
            if (!string.IsNullOrEmpty(dr["MainCurrencyID"].ToString()))
            {
                this.MainCurrencyID = Convert.ToInt16(dr["MainCurrencyID"].ToString());
            }

            if (!string.IsNullOrEmpty(dr["IsRepOffice"].ToString()) && (bool)dr["IsRepOffice"])
            {
                this.IsRepOffice = (bool)dr["IsRepOffice"];
            }
            
            this.TotalAmount = Convert.ToDouble(dr["TotalAmount"].ToString());
            this.IsFullClearing = (bool)dr["isFullClearing"];
            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, long newID)
        {
            long oldID = dr.Field<long>("RemittanceID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["RemittanceID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public long GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt64(dr["RemittanceID"].ToString());
        }
        public long GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt64(dr["RemittanceID", rowState].ToString());
        }
        #endregion
    }
}
