//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by NHibernate.
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------
using System;
using SCG.eAccounting.DTO.DataSet;
using System.Data;
using SS.Standard.Data.NHibernate.DTO;

namespace SCG.eAccounting.DTO
{
    [Serializable]

    public partial class TADocumentTraveller : INHibernateAdapterDTO<int>
    {
        #region Fields

        private int travellerID;
        private string employeeNameEng;
        private string airLineMember;
        private SCG.DB.DTO.DbCostCenter costCenterID;
        private SCG.DB.DTO.DbInternalOrder iOID;
        private SCG.DB.DTO.DbAccount account;
        private long updBy;
        private DateTime updDate;
        private long creBy;
        private DateTime creDate;
        private string updPgm;
        private byte[] rowVersion;
        private bool active;
        private SCG.eAccounting.DTO.TADocument taDocumentID;
        private SS.SU.DTO.SuUser userID;
        private string userName;

        #endregion

        #region Constructors

        /// <summary>
        /// Initializes a new instance of the TADocumentTraveller class
        /// </summary>
        public TADocumentTraveller()
        {
        }

        public TADocumentTraveller(int travellerID)
        {
            this.travellerID = travellerID;
        }

        /// <summary>
        /// Initializes a new instance of the TADocumentTraveller class
        /// </summary>
        /// <param name="employeeNameEng">Initial <see cref="TADocumentTraveller.EmployeeNameEng" /> value</param>
        /// <param name="airLineMember">Initial <see cref="TADocumentTraveller.AirLineMember" /> value</param>
        /// <param name="updBy">Initial <see cref="TADocumentTraveller.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="TADocumentTraveller.UpdDate" /> value</param>
        /// <param name="creBy">Initial <see cref="TADocumentTraveller.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="TADocumentTraveller.CreDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="TADocumentTraveller.UpdPgm" /> value</param>
        /// <param name="rowVersion">Initial <see cref="TADocumentTraveller.RowVersion" /> value</param>
        /// <param name="active">Initial <see cref="TADocumentTraveller.Active" /> value</param>
        /// <param name="taDocumentID">Initial <see cref="TADocument.TADocumentID" /> value</param>
        /// <param name="userID">Initial <see cref="SuUser.UserID" /> value</param>
        public TADocumentTraveller(string employeeNameEng, string airLineMember, long updBy, DateTime updDate, long creBy, DateTime creDate, string updPgm, byte[] rowVersion, bool active,SCG.eAccounting.DTO.TADocument taDocumentID, SS.SU.DTO.SuUser userID)
        {
            this.employeeNameEng = employeeNameEng;
            this.airLineMember = airLineMember;
            this.updBy = updBy;
            this.updDate = updDate;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updPgm = updPgm;
            this.rowVersion = rowVersion;
            this.active = active;
            this.taDocumentID = taDocumentID;
            this.userID = userID;
        }

        /// <summary>
        /// Minimal constructor for class TADocumentTraveller
        /// </summary>
        /// <param name="updBy">Initial <see cref="TADocumentTraveller.UpdBy" /> value</param>
        /// <param name="updDate">Initial <see cref="TADocumentTraveller.UpdDate" /> value</param>
        /// <param name="creBy">Initial <see cref="TADocumentTraveller.CreBy" /> value</param>
        /// <param name="creDate">Initial <see cref="TADocumentTraveller.CreDate" /> value</param>
        /// <param name="updPgm">Initial <see cref="TADocumentTraveller.UpdPgm" /> value</param>
        /// <param name="active">Initial <see cref="TADocumentTraveller.Active" /> value</param>
        public TADocumentTraveller(long updBy, DateTime updDate, long creBy, DateTime creDate, string updPgm, bool active)
        {
            this.updBy = updBy;
            this.updDate = updDate;
            this.creBy = creBy;
            this.creDate = creDate;
            this.updPgm = updPgm;
            this.active = active;
        }
        #endregion

        #region Properties

        /// <summary>
        /// Gets or sets the TravellerID for the current TADocumentTraveller
        /// </summary>
        public virtual int TravellerID
        {
            get { return this.travellerID; }
            set { this.travellerID = value; }
        }

        /// <summary>
        /// Gets or sets the EmployeeNameEng for the current TADocumentTraveller
        /// </summary>
        public virtual string EmployeeNameEng
        {
            get { return this.employeeNameEng; }
            set { this.employeeNameEng = value; }
        }

        /// <summary>
        /// Gets or sets the AirLineMember for the current TADocumentTraveller
        /// </summary>
        public virtual string AirLineMember
        {
            get { return this.airLineMember; }
            set { this.airLineMember = value; }
        }


        public virtual SCG.DB.DTO.DbCostCenter CostCenterID
        {
            get { return costCenterID; }
            set { costCenterID = value; }
        }

        public virtual SCG.DB.DTO.DbInternalOrder IOID
        {
            get { return iOID; }
            set { iOID = value; }
        }

        public virtual SCG.DB.DTO.DbAccount Account
        {
            get { return account; }
            set { account = value; }
        }

        /// <summary>
        /// Gets or sets the UpdBy for the current TADocumentTraveller
        /// </summary>
        public virtual long UpdBy
        {
            get { return this.updBy; }
            set { this.updBy = value; }
        }

        /// <summary>
        /// Gets or sets the UpdDate for the current TADocumentTraveller
        /// </summary>
        public virtual DateTime UpdDate
        {
            get { return this.updDate; }
            set { this.updDate = value; }
        }

        /// <summary>
        /// Gets or sets the CreBy for the current TADocumentTraveller
        /// </summary>
        public virtual long CreBy
        {
            get { return this.creBy; }
            set { this.creBy = value; }
        }

        /// <summary>
        /// Gets or sets the CreDate for the current TADocumentTraveller
        /// </summary>
        public virtual DateTime CreDate
        {
            get { return this.creDate; }
            set { this.creDate = value; }
        }

        /// <summary>
        /// Gets or sets the UpdPgm for the current TADocumentTraveller
        /// </summary>
        public virtual string UpdPgm
        {
            get { return this.updPgm; }
            set { this.updPgm = value; }
        }

        /// <summary>
        /// Gets or sets the RowVersion for the current TADocumentTraveller
        /// </summary>
        public virtual byte[] RowVersion
        {
            get { return this.rowVersion; }
            set { this.rowVersion = value; }
        }

        /// <summary>
        /// Gets or sets the Active for the current TADocumentTraveller
        /// </summary>
        public virtual bool Active
        {
            get { return this.active; }
            set { this.active = value; }
        }

        /// <summary>
        /// Gets or sets the TADocumentID for the current TADocument
        /// </summary>
        public virtual SCG.eAccounting.DTO.TADocument TADocumentID
        {
            get { return this.taDocumentID; }
            set { this.taDocumentID = value; }
        }
                
        /// <summary>
        /// Gets or sets the UserID for the current SuUser
        /// </summary>
        public virtual SS.SU.DTO.SuUser UserID
        {
            get { return this.userID; }
            set { this.userID = value; }
        }

        public virtual string UserName
        {
            get { return this.userName; }
            set { this.userName = value; }
        }
        #endregion

        #region Constructors of DataSet
        public TADocumentTraveller(TADocumentDataSet.TADocumentTravellerRow taDocumentTravellerRow)
        {
            //this.travellerID = taDocumentTravellerRow.TravellerID;
            //this.taDocumentID = new TADocument(taDocumentTravellerRow.TADocumentID);
            //this.userID = new SS.SU.DTO.SuUser(taDocumentTravellerRow.UserID);
            //this.employeeNameEng = taDocumentTravellerRow.EmployeeNameEng;
            //this.airLineMember = taDocumentTravellerRow.AirLineMember;
            //this.Active = taDocumentTravellerRow.Active;
            //this.CreBy = taDocumentTravellerRow.CreBy;
            //this.CreDate = taDocumentTravellerRow.CreDate;
            //this.UpdBy = taDocumentTravellerRow.UpdBy;
            //this.UpdDate = taDocumentTravellerRow.UpdDate;
            //this.UpdPgm = taDocumentTravellerRow.UpdPgm;
        }
        #endregion Constructors of DataSet

        #region INHibernateAdapterDTO<int> Members
        public void LoadFromDataRow(DataRow dr)
        {
            this.TravellerID = Convert.ToInt32(dr["TravellerID"]);
            if (!string.IsNullOrEmpty(dr["TADocumentID"].ToString()))
            {
                this.TADocumentID = new TADocument(Convert.ToInt64(dr["TADocumentID"]));
            }
            if (!string.IsNullOrEmpty(dr["UserID"].ToString()))
            {
                this.UserID = new SS.SU.DTO.SuUser(Convert.ToInt64(dr["UserID"]));
            }
            this.EmployeeNameEng = dr["EmployeeNameEng"].ToString();
            this.AirLineMember = dr["AirLineMember"].ToString();

            if (!string.IsNullOrEmpty(dr["CostCenterID"].ToString()) && Convert.ToInt64(dr["CostCenterID"]) > 0)
            {
                this.CostCenterID = new SCG.DB.DTO.DbCostCenter(Convert.ToInt64(dr["CostCenterID"]));
            }
            else
            {
                this.CostCenterID = null;
            }
            if (!string.IsNullOrEmpty(dr["AccountID"].ToString()) && Convert.ToInt64(dr["AccountID"]) > 0)
            {
                this.Account = new SCG.DB.DTO.DbAccount(Convert.ToInt64(dr["AccountID"]));
            }
            else
            {
                this.Account = null;
            }
            if (!string.IsNullOrEmpty(dr["IOID"].ToString()) && Convert.ToInt64(dr["IOID"]) > 0)
            {
                this.IOID = new SCG.DB.DTO.DbInternalOrder(Convert.ToInt64(dr["IOID"]));
            }
            else
            {
                this.IOID = null;
            }

            this.Active = (bool)dr["Active"];
            this.CreBy = Convert.ToInt64(dr["CreBy"].ToString());
            this.CreDate = Convert.ToDateTime(dr["CreDate"]);
            this.UpdBy = Convert.ToInt64(dr["UpdBy"].ToString());
            this.UpdDate = Convert.ToDateTime(dr["UpdDate"]);
            this.UpdPgm = dr["UpdPgm"].ToString();
        }
        public void SaveIDToDataRow(DataTable dt, DataRow dr, int newID)
        {
            int oldID = dr.Field<int>("TravellerID");

            dt.PrimaryKey[0].ReadOnly = false;
            dt.Rows.Find(oldID).BeginEdit();
            dt.Rows.Find(oldID)["TravellerID"] = newID;
            dt.Rows.Find(oldID).EndEdit();
            dt.PrimaryKey[0].ReadOnly = true;
        }
        public int GetIDFromDataRow(DataRow dr)
        {
            return Convert.ToInt32(dr["TravellerID"].ToString());
        }
        public int GetIDFromDataRow(DataRow dr, DataRowVersion rowState)
        {
            return Convert.ToInt32(dr["TravellerID", rowState].ToString());
        }
        #endregion
    }
}
